name: Submit Grades to Google Sheets

on:
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  submit_grades:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
    
    - name: Add grades to Google Sheets
      env:
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
        SHEET_ID: 'your-google-sheet-id-here'
      run: |
        python -c "
import os
import json
import re
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

creds = Credentials.from_service_account_info(
    json.loads(os.environ['GOOGLE_SHEETS_CREDENTIALS']),
    scopes=['https://www.googleapis.com/auth/spreadsheets']
)

sheets_service = build('sheets', 'v4', credentials=creds)
spreadsheet_id = os.environ['SHEET_ID']

sheet = sheets_service.spreadsheets()

def find_or_add_student_row(student_id, last_name, padron):
    result = sheet.values().get(spreadsheetId=spreadsheet_id, range="Sheet1!B:B").execute()
    values = result.get('values', [])
    for i, row in enumerate(values, start=2):  
        if row and row[0] == student_id:
            return i  
    new_row = [last_name, padron, student_id]  
    sheet.values().append(
        spreadsheetId=spreadsheet_id,
        range="Sheet1!A:C",   
        valueInputOption="RAW",
        body={"values": [new_row]}
    ).execute()
    return len(values) + 2 

def update_grade(student_id, partial_number, grade, last_name, padron):
    row = find_or_add_student_row(student_id, last_name, padron)
    col = 2 + partial_number   
    range = f"Sheet1!{chr(64 + col)}{row}"
    
    result = sheets_service.spreadsheets().values().update(
        spreadsheetId=spreadsheet_id,
        range=range,
        valueInputOption="RAW",
        body={"values": [[grade]]}
    ).execute()
    print(f"Updated grade for {student_id} in Partial {partial_number}: {grade}")
    
    total = 0
    for i in range(3, 9):   
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id, range=f"Sheet1!{chr(64 + i)}{row}"
        ).execute()
        grade = result.get('values', [[]])[0][0]
        total += float(grade) if grade else 0

    total_range = f"Sheet1!I{row}"   
    result = sheets_service.spreadsheets().values().update(
        spreadsheetId=spreadsheet_id,
        range=total_range,
        valueInputOption="RAW",
        body={"values": [[total]]}
    ).execute()
    print(f"Updated total grade for {student_id}: {total}")

def parse_pr_title(pr_title):
    match = re.match(r"PARCIALITO_(\d+)_([A-Za-z]+)_(\d+)", pr_title)
    if match:
        partial_number = int(match.group(1))
        last_name = match.group(2)
        student_id = match.group(3)
        return partial_number, last_name, student_id
    else:
        print(f"PR title '{pr_title}' does not match the expected format.")
        return None, None, None

pr_title = os.environ['GITHUB_EVENT_NAME']  

partial_number, last_name, student_id = parse_pr_title(pr_title)

if partial_number and student_id:
    grade = 85   
    padron = student_id   
    update_grade(student_id, partial_number, grade, last_name, padron)
else:
    print("Error: No valid PR title format detected.")
"
